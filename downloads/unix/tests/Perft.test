#
#loading extension
#

load ./libPerft1.0.so

#
# procedure Quicksort
#
proc Quicksort {m} {
    if {[llength $m] <= 1} {
        return $m
    }
    set pivot [lindex $m 0]
    set less [set equal [set greater [list]]]
    foreach x $m {
        lappend [expr {$x < $pivot ? "less" : $x > $pivot ? "greater" : "equal"}] $x
    }
    return [concat [Quicksort $less] $equal [Quicksort $greater]]
}

#
# procedure factorial
#
proc Factorial {x} {
	set i 1; set product 1
	while {$i <= $x} {
		set product [expr $product * $i]
		incr i
	}
	return $product
}
 


#
# scripts 0, 1 and 2 for test 1 [Increasing Factorials test  for PAPI_TOT_INS (total instructions)]
#
set script1_0  {
    for {set i 0} {$i  < 10} {incr i} {
    set fact [Factorial $i];
    }
}

set script1_1  {
    for {set i 0} {$i  < 15} {incr i} {
    set fact [Factorial $i];
    }
}

set script1_2  {
    for {set i 0} {$i  < 20} {incr i} {
    set fact [Factorial $i];
    }
}


#
# test 1
# -- Increasing Factorials test  for PAPI_TOT_INS (total instructions)
#
set test1 {
    puts "Increasing Factorials test  for PAPI_TOT_INS (total instructions)..............."
    perft::init [list PAPI_TOT_INS]
    set res0 [dict get [perft::run_script $script1_0] PAPI_TOT_INS]
    set res1 [dict get [perft::run_script $script1_1] PAPI_TOT_INS]
    set res2 [dict get [perft::run_script $script1_2] PAPI_TOT_INS]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test1 passed..."
    } else {
        puts "test1 failed..."
    }
}

#
# scripts 0, 1 and 2 for test 2 [test  for PAPI_FP_OPS (floating point ops)]
#
set script2_0 {
    for {set i 0} {$i  < 1000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


set script2_1 {
    for {set i 0} {$i  < 10000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


set script2_2 {
    for {set i 0} {$i  < 100000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


#
# test 2
# --test  for PAPI_FP_OPS (floating point ops)
#
set test2 {
    puts "test  for PAPI_FP_OPS (floating point ops)..............."
    perft::init [list PAPI_FP_OPS]
    set res0 [dict get [perft::run_script $script2_0] PAPI_FP_OPS]
    set res1 [dict get [perft::run_script $script2_1] PAPI_FP_OPS]
    set res2 [dict get [perft::run_script $script2_2] PAPI_FP_OPS]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test2 passed..."
    } else {
        puts "test2 failed..."
    }
}

#
# test 3
# --test  for levelwise total cache accesses
#
set test3 {
    puts "test  for levelwise total cache accesses..............."
    perft::init [list PAPI_L1_TCA PAPI_L2_TCA PAPI_L3_TCA]
    set res [perft::run_script $script2_2] 
    if {[dict get $res PAPI_L3_TCA]<[dict get $res PAPI_L2_TCA] && [dict get $res PAPI_L2_TCA]<[dict get $res PAPI_L1_TCA]} {
        puts "test3 passed..."
    } else {
        puts "test3 failed..."
    }
}

#
# scripts 0, 1 and 2 for test 4 [test  for conditional branches]
#
set script4_0 {
    for {set i 0} {$i  < 100} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
} 

set script4_1 {
    for {set i 0} {$i  < 1000} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
}

set script4_2 {
    for {set i 0} {$i  < 10000} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
}

#
# test 4
# -- test  for conditional branches
#
set test4 {
    puts "test  for conditional branches ..............."
    perft::init [list PAPI_BR_CN]
    set res0 [dict get [perft::run_script $script4_0] PAPI_BR_CN]
    set res1 [dict get [perft::run_script $script4_1] PAPI_BR_CN]
    set res2 [dict get [perft::run_script $script4_2] PAPI_BR_CN]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test4 passed..."
    } else {
        puts "test4 failed..."
    }
}


#
# test 5
# -- test  for run_file cmd
#
set test5 {
    puts "test  for run_file cmd ..............."
    perft::init [list PAPI_TOT_INS]
    set res0 [dict get [perft::run_file ./unix/tests/Perft_test1.tcl] PAPI_TOT_INS]
    set res1 [dict get [perft::run_file ./unix/tests/Perft_test2.tcl] PAPI_TOT_INS]
    set res2 [dict get [perft::run_file ./unix/tests/Perft_test3.tcl] PAPI_TOT_INS]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test5 passed..."
    } else {
        puts "test5 failed..."
    }
}


#
# test 6
# -- test  for multiplexing
#
set test6 {
    puts "test  for multiplexing ..............."
    set events_list [list PAPI_L1_DCM PAPI_L1_ICM PAPI_L1_TCM PAPI_BR_UCN PAPI_BR_CN PAPI_TOT_INS PAPI_SR_INS PAPI_TOT_CYC]
    perft::init $events_list
    set res [perft::run_script $script2_2]
    set passed 1
    for {set i 0} {$i  < 8} {incr i} {
        if {[dict get $res [lindex $events_list  $i]] == 0} {
            set passed 0
        }
    }    
    if {$passed==1} {
        puts "test6 passed..."
    } else {
        puts "test6 failed..."
    }
}


#
# running test 1
#
eval $test1

#
# running test 2
#
eval $test2

#
# running test 3
#
eval $test3

#
# running test 4
#
eval $test4

#
# running test 5
#
eval $test5

#
# running test 6
#
eval $test6



