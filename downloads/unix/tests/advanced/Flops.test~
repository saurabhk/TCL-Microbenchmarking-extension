#
# Testing Floating point operations
#

#
# loading the extension
#
load ./libPerft1.0.so

#
# procedure factorial
#
proc Factorial {x} {
	set i 1
	set product 1
	while {$i <= $x} {
		set product [expr $product * $i]
		incr i
	}
	return $product
}

#
# procedure factorialMod (modified version of proc Factorial-- 'set product 1' replaced with 'set product 1.0' )
#
proc FactorialMod {x} {
	set i 1
	set product 1.0
	while {$i <= $x} {
		set product [expr $product * $i]
		incr i
	}
	return $product
}

#
# empty script
#
set empty ""

#
# script 1-- using original factorial function
# evaluates factorial 10 10000 times
#
set script1 "Factorial 10 \n"
set script1 [string repeat $script1 10000]

#
# script 2-- using modified factorial function
# evaluates factorial 10 10000 times
#
set script2 "FactorialMod 10 \n"
set script2 [string repeat $script2 10000]

#
# initializes the event list and papi
#
perft::init [list PAPI_FP_OPS PAPI_FP_INS PAPI_TOT_INS]


#
# running the scripts and counting events
#


puts "----------------------------"
puts "Original factorial function--"
set results [perft::run_script  $script1]
puts $results
puts "flops %(wrt total instructions) ....... [expr [dict get $results PAPI_FP_OPS]*100.0/[dict get $results PAPI_TOT_INS]]%"
puts "----------------------------"

##

puts "Modified factorial function-- (% flops should increase)"
set results [perft::run_script  $script2]
puts $results
puts "flops %(wrt total instructions) ....... [expr [dict get $results PAPI_FP_OPS]*100.0/[dict get $results PAPI_TOT_INS]]%"
puts "----------------------------"

##

puts "running empty script--"
set results [perft::run_script  $empty]
puts $results
puts "----------------------------"
