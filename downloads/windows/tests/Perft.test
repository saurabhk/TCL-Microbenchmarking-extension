#
#loading extension
#

load ./Perft.dll

#
# procedure Quicksort
#
proc Quicksort {m} {
    if {[llength $m] <= 1} {
        return $m
    }
    set pivot [lindex $m 0]
    set less [set equal [set greater [list]]]
    foreach x $m {
        lappend [expr {$x < $pivot ? "less" : $x > $pivot ? "greater" : "equal"}] $x
    }
    return [concat [Quicksort $less] $equal [Quicksort $greater]]
}

#
# procedure factorial
#
proc Factorial {x} {
	set i 1; set product 1
	while {$i <= $x} {
		set product [expr $product * $i]
		incr i
	}
	return $product
}
 


#
# scripts 0, 1 and 2 for test 1 [Increasing Factorials test  (total instructions)]
#
set script1_0  {
    for {set i 0} {$i  < 10} {incr i} {
    set fact [Factorial $i];
    }
}

set script1_1  {
    for {set i 0} {$i  < 15} {incr i} {
    set fact [Factorial $i];
    }
}

set script1_2  {
    for {set i 0} {$i  < 20} {incr i} {
    set fact [Factorial $i];
    }
}


#
# test 1
# -- Increasing Factorials test  for INSTR (total instructions)
#
set test1 {
    puts "Increasing Factorials test  for INSTR (total instructions)..............."
    perft::init [list INSTR]
    set res0 [dict get [perft::run_script $script1_0] INSTR]
    set res1 [dict get [perft::run_script $script1_1] INSTR]
    set res2 [dict get [perft::run_script $script1_2] INSTR]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test passed..."
    } else {
        puts "test failed..."
    }
}

#
# scripts 0, 1 and 2 for test 2 
#
set script2_0 {
    for {set i 0} {$i  < 1000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


set script2_1 {
    for {set i 0} {$i  < 10000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


set script2_2 {
    for {set i 0} {$i  < 100000} {incr i} {
        set fpres [expr 3.323/ [expr 3.43+$i] ]
    }
}    


#
# test 2
# -- test for levelwise instruction cache misses
#
set test2 {
    puts "test for levelwise instruction cache misses..............."
    perft::init [list L1I_MISSES L2_REQS_IFETCH_MISS]
    set res [perft::run_script $script2_2] 
    if {[dict get $res L2_REQS_IFETCH_MISS]<[dict get $res L1I_MISSES]} {
        puts "test passed..."
    } else {
        puts "test failed..."
    }
}

#
# scripts 0, 1 and 2 for test 3 [test  for branch instructions]
#
set script3_0 {
    for {set i 0} {$i  < 100} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
} 

set script3_1 {
    for {set i 0} {$i  < 1000} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
}

set script3_2 {
    for {set i 0} {$i  < 10000} {incr i} {
        Quicksort {8 6 4 2 1 3 5 7 9}
    }
}

#
# test 3
# -- test  for branch instructions
#
set test3 {
    puts "test  for branch instructions ..............."
    perft::init [list BRANCH]
    set res0 [dict get [perft::run_script $script3_0] BRANCH]
    set res1 [dict get [perft::run_script $script3_1] BRANCH]
    set res2 [dict get [perft::run_script $script3_2] BRANCH]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test passed..."
    } else {
        puts "test failed..."
    }
}


#
# test 4
# -- test  for run_file cmd
#
set test4 {
    puts "test  for run_file cmd ..............."
    perft::init [list INSTR]
    set res0 [dict get [perft::run_file ../test/Perft_test1.tcl] INSTR]
    set res1 [dict get [perft::run_file ../test/Perft_test2.tcl] INSTR]
    set res2 [dict get [perft::run_file ../test/Perft_test3.tcl] INSTR]        
    if {$res0<$res1 && $res1<$res2} {
        puts "test passed..."
    } else {
        puts "test failed..."
    }
}




#
# running test 1
#
eval $test1
puts ""

#
# running test 2
#
eval $test2
puts ""

#
# running test 3
#
eval $test3
puts ""

#
# running test 4
#
eval $test4
puts ""




